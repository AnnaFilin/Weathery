////
////  Persistence.swift
////  Weathery
////
////  Created by Anna Filin on 19/02/2025.
////
//
//import Foundation
//
//
//struct WeatherDataEntry: Codable {
//    let realtime: RealtimeWeatherResponse
//    let daily: DailyForecastResponse
//    let hourly: HourlyForecastResponse
//    let timestamp: Date?
//}
//
//struct PersistentCity: Identifiable, Codable, Hashable {
//    let id: Int
//    let name: String
//    let country: String
//    let latitude: Double
//    let longitude: Double
//    
//    
//}
//
//
//class Persistence: ObservableObject {
//    
//    @Published private(set) var favoritedCities: Set<PersistentCity> = [] {
//        willSet {
//            objectWillChange.send() // ‚úÖ –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é
//        }
//    }
//    
//    
//    @Published var selectedCity: PersistentCity?
//    
//    @Published var weatherData: [Int: WeatherDataEntry] = [:]
//    
//    private let key = "FavoriteCities"
//    
//    init() {
//        loadFavorites()
//        loadWeatherData() // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
//    }
//    
//    private func loadWeatherData() {
//        
//        
//        if let savedData = UserDefaults.standard.data(forKey: "WeatherDataCache"),
//           let decodedData = try? JSONDecoder().decode([Int: WeatherDataEntry].self, from: savedData) {
//            weatherData = decodedData
//            print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ")
//        } else {
//            print("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ")
//        }
//    }
//    
//    func saveWeatherData(for city: City, realtime: RealtimeWeatherResponse, daily: DailyForecastResponse, hourly: HourlyForecastResponse) {
//        print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è \(city.name) –≤ weatherData")
//        print("üîç –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º: \(realtime.weatherData.values.temperature)¬∞C, \(daily.timelines.daily.first?.values.temperatureAvg ?? 0)¬∞C")
//        
//        weatherData[city.id] = WeatherDataEntry(realtime: realtime, daily: daily, hourly: hourly, timestamp: Date())
//        
//        if let encoded = try? JSONEncoder().encode(weatherData) {
//            UserDefaults.standard.set(encoded, forKey: "WeatherDataCache")
//        }
//        
//        print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: \(weatherData[city.id] != nil ? "–î–∞" : "–ù–µ—Ç")")
//        
//        
//    }
//    
//    
//    func getWeatherData(for city: City) -> (RealtimeWeatherResponse?, DailyForecastResponse?, HourlyForecastResponse?) {
//        
//        
//        if let entry = weatherData[city.id] {  // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ –∫–æ—Ä—Ç–µ–∂
//            print("üìç –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è \(city.name): –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ \(entry.realtime.weatherData.values.temperature)¬∞C")
//            
//            if let timestamp = entry.timestamp, Date().timeIntervalSince(timestamp) < 3 * 3600 {
//                print("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã (–º–æ–ª–æ–∂–µ 3 —á–∞—Å–æ–≤)")
//                return (entry.realtime, entry.daily, entry.hourly)
//            } else {
//                print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ (—Å—Ç–∞—Ä—à–µ 3 —á–∞—Å–æ–≤)")
//            }
//        } else {
//            print("‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è \(city.name) –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
//        }
//        return (nil, nil, nil)
//    }
//    
//    
//    
//    
//    func contains(_ city: PersistentCity) -> Bool {
//        favoritedCities.contains(city)
//    }
//    
//    func addToFavorites(_ city: PersistentCity) {
//        print("‚≠ê –î–æ–±–∞–≤–ª—è—é –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: \(city.name)")
//                objectWillChange.send()
//        favoritedCities.insert(city)
//        saveToFavorites()
//    }
//    
//    func removeFromFavorites(_ city: PersistentCity) {
//        objectWillChange.send()
//        favoritedCities.remove(city)
//        saveToFavorites()
//    }
//    
//    func saveToFavorites() {
//        if let encoded = try? JSONEncoder().encode(favoritedCities) {
//            UserDefaults.standard.set(encoded, forKey: key)
//        }
//    }
//    
//    
//    
//    
//    
//    private func loadFavorites() { // ‚úÖ –í—ã–Ω–µ—Å –∑–∞–≥—Ä—É–∑–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
//        if let savedItems = UserDefaults.standard.data(forKey: key),
//           let decodedItems = try? JSONDecoder().decode(Set<PersistentCity>.self, from: savedItems) {
//            favoritedCities = decodedItems
//        }
//    }
//    
//    //    func clearOldCache() {
//    //        let now = Date()
//    //        cachedWeather = cachedWeather.filter { _, value in
//    //            now.timeIntervalSince(value.1) < 24 * 3600 // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
//    //        }
//    //    }
//}
//
//extension PersistentCity {
//    init(from city: City) {
//        self.id = city.id
//        self.name = city.name
//        self.country = city.country
//        self.latitude = city.latitude
//        self.longitude = city.longitude
//    }
//}
//
//extension PersistentCity {
//    func toCity() -> City {
//        return City(
//            id: self.id,
//            wikiDataId: nil,  // –ò–ª–∏ —É–∫–∞–∂–∏ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
//            type: nil,  // –ò–ª–∏ –ø–µ—Ä–µ–¥–∞–π —Ä–µ–∞–ª—å–Ω—ã–π —Ç–∏–ø
//            city: self.name,
//            name: self.name,
//            country: "",  // –ò–ª–∏ –ø–µ—Ä–µ–¥–∞–π —Å—Ç—Ä–∞–Ω—É, –µ—Å–ª–∏ –µ—Å—Ç—å
//            countryCode: "",  // –ò–ª–∏ –ø–µ—Ä–µ–¥–∞–π –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
//            region: nil,  // –ò–ª–∏ –ø–µ—Ä–µ–¥–∞–π —Ä–µ–≥–∏–æ–Ω
//            regionCode: nil,  // –ò–ª–∏ –ø–µ—Ä–µ–¥–∞–π –∫–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞
//            regionWdId: nil,  // –ò–ª–∏ –ø–µ—Ä–µ–¥–∞–π ID —Ä–µ–≥–∏–æ–Ω–∞
//            latitude: self.latitude,
//            longitude: self.longitude,
//            population: nil  // –ò–ª–∏ –ø–µ—Ä–µ–¥–∞–π —Ä–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
//        )
//    }
//}


import Foundation

struct WeatherDataEntry: Codable {
    let realtime: RealtimeWeatherResponse
    let daily: DailyForecastResponse
    let hourly: HourlyForecastResponse
    let timestamp: Date?
}

struct PersistentCity: Identifiable, Codable, Hashable {
    let id: Int
    let name: String
    let country: String
    let latitude: Double
    let longitude: Double
}

class Persistence: ObservableObject {
    
    @Published private(set) var favoritedCities: Set<PersistentCity> = [] {
        willSet {
            objectWillChange.send() // ‚úÖ Manually trigger an update
        }
    }
    
    @Published var selectedCity: PersistentCity?
    
    @Published var weatherData: [Int: WeatherDataEntry] = [:]
    
    private let key = "FavoriteCities"
    
    init() {
        loadFavorites()
        loadWeatherData() // ‚úÖ Load saved weather data
    }
    
    func hasWeatherData(for city: PersistentCity) -> Bool {
        if let entry = weatherData[city.id] {
            if let timestamp = entry.timestamp, Date().timeIntervalSince(timestamp) < 3 * 3600 {
                print("‚úÖ Weather data for \(city.name) is up-to-date")
                return true
            } else {
                print("‚ö†Ô∏è Weather data for \(city.name) is outdated")
            }
        } else {
            print("‚ùå No weather data found for \(city.name)")
        }
        return false
    }

    
    private func loadWeatherData() {
        if let savedData = UserDefaults.standard.data(forKey: "WeatherDataCache"),
           let decodedData = try? JSONDecoder().decode([Int: WeatherDataEntry].self, from: savedData) {
            weatherData = decodedData
            print("‚úÖ Loaded cached weather data")
        } else {
            print("‚ùå No cached weather data found")
        }
    }
    
    func saveWeatherData(for city: City, realtime: RealtimeWeatherResponse, daily: DailyForecastResponse, hourly: HourlyForecastResponse) {
        print("üíæ Saving weather data for \(city.name) in weatherData")
        print("üîç Data before saving: \(realtime.weatherData.values.temperature)¬∞C, \(daily.timelines.daily.first?.values.temperatureAvg ?? 0)¬∞C")
        
        weatherData[city.id] = WeatherDataEntry(realtime: realtime, daily: daily, hourly: hourly, timestamp: Date())
        
        if let encoded = try? JSONEncoder().encode(weatherData) {
            UserDefaults.standard.set(encoded, forKey: "WeatherDataCache")
        }
        
        print("‚úÖ Data saved: \(weatherData[city.id] != nil ? "Yes" : "No")")
    }
    
    func getWeatherData(for city: City) -> (RealtimeWeatherResponse?, DailyForecastResponse?, HourlyForecastResponse?) {
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è \(city.name) –≤ `weatherData`")
        if let entry = weatherData[city.id] { // ‚úÖ Use an object instead of a tuple
            print("üìç Found weather data for \(city.name): Temperature \(entry.realtime.weatherData.values.temperature)¬∞C")
            
            if let timestamp = entry.timestamp, Date().timeIntervalSince(timestamp) < 3 * 3600 {
                print("‚úÖ Data is up-to-date (less than 3 hours old)")
                return (entry.realtime, entry.daily, entry.hourly)
            } else {
                print("‚ö†Ô∏è Data is outdated (older than 3 hours)")
            }
        } else {
            print("‚ùå No weather data found for \(city.name)")
        }
        return (nil, nil, nil)
    }
    
    func refreshFavoriteCitiesWeather() {
        for city in favoritedCities {
            let weatherData = getWeatherData(for: city.toCity())

            if weatherData.0 == nil || weatherData.1 == nil || weatherData.2 == nil {
                print("üåç [DEBUG] –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è \(city.name), –∑–∞–≥—Ä—É–∂–∞–µ–º...")
                Task {
                    await WeatherService.shared.fetchWeatherData(for: city.toCity())
                }
            } else {
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è \(city.name) —É–∂–µ –µ—Å—Ç—å")
            }
        }
    }

    
    func contains(_ city: PersistentCity) -> Bool {
        favoritedCities.contains(city)
    }
    
    func addToFavorites(_ city: PersistentCity) {
        print("‚≠ê Adding to favorites: \(city.name)")
        objectWillChange.send()
        favoritedCities.insert(city)
        saveToFavorites()
    }
    
    func removeFromFavorites(_ city: PersistentCity) {
        objectWillChange.send()
        favoritedCities.remove(city)
        saveToFavorites()
    }
    
    func saveToFavorites() {
        if let encoded = try? JSONEncoder().encode(favoritedCities) {
            UserDefaults.standard.set(encoded, forKey: key)
        }
    }
    
//    private func loadFavorites() { // ‚úÖ Moved loading into a separate function
//        if let savedItems = UserDefaults.standard.data(forKey: key),
//           let decodedItems = try? JSONDecoder().decode(Set<PersistentCity>.self, from: savedItems) {
//            favoritedCities = decodedItems
//        }
//    }
    private func loadFavorites() {
        if let savedItems = UserDefaults.standard.data(forKey: key),
           let decodedItems = try? JSONDecoder().decode(Set<PersistentCity>.self, from: savedItems) {
            favoritedCities = decodedItems
            print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: \(favoritedCities.map { $0.name })")

            // üî• –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ ‚Äì –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è –Ω–∏—Ö
            refreshFavoriteCitiesWeather()
        } else {
            print("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤")
        }
    }

}

extension PersistentCity {
    init(from city: City) {
        self.id = city.id
        self.name = city.name
        self.country = city.country
        self.latitude = city.latitude
        self.longitude = city.longitude
    }
}

extension PersistentCity {
    func toCity() -> City {
        return City(
            id: self.id,
            wikiDataId: nil,
            type: nil,
            city: self.name,
            name: self.name,
            country: "",
            countryCode: "",
            region: nil,
            regionCode: nil,
            regionWdId: nil,
            latitude: self.latitude,
            longitude: self.longitude,
            population: nil
        )
    }
}
