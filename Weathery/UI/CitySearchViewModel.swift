//
//  CitySearchViewModel.swift
//  Weathery
//
//  Created by Anna Filin on 16/02/2025.
//
import Combine
import Foundation

class CitySearchViewModel: ObservableObject {

    private let cityService: CitySearchServiceProtocol
    @Published var cities: [City] = []
    @Published var errorMessage: String?
    @Published var searchText: String = ""
    @Published var isSearching = false

    
    private var persistence: Persistence
//
    private var weatherViewModel: WeatherViewModel
    private var cancellables = Set<AnyCancellable>()


        init(cityService: CitySearchServiceProtocol = CitySearchService(), weatherViewModel: WeatherViewModel, persistence: Persistence) {
            self.cityService = cityService
            self.weatherViewModel = weatherViewModel
            self.persistence = persistence
            setupSearchDebounce()
        }
    
    private func setupSearchDebounce() {
        $searchText
            .debounce(for: .seconds(1.5), scheduler: DispatchQueue.main) // ‚úÖ –ñ–¥—ë–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º
            .removeDuplicates()
//            .throttle(for: .seconds(2), scheduler: DispatchQueue.main, latest: true)
            .sink { [weak self] query in
                guard let self = self else { return }
                Task { await self.performCitySearch(query: query) } // ‚úÖ –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ Task
            }
            .store(in: &cancellables)
    }

    
    /// ‚úÖ –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è debounce, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
    @MainActor
    private func performCitySearch(query: String) async {
        let trimmedQuery = query.trimmingCharacters(in: .whitespacesAndNewlines)
        guard !trimmedQuery.isEmpty else {
            await MainActor.run { self.cities = [] } // ‚úÖ –¢–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            return
        }
        await searchCities(query: trimmedQuery)
    }
    
    @MainActor
    func updateSelectedCity(city: City, fromSearch: Bool = false) {
        if persistence.selectedCity?.id == city.id {
            print("‚ö†Ô∏è –ì–æ—Ä–æ–¥ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ `Persistence`, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º")
            return
        }

        print("üìå –í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: \(city.name), fromSearch: \(fromSearch)")

        weatherViewModel.updateSelectedCity(city: city)

        if !fromSearch {
            persistence.selectedCity = PersistentCity(from: city)
            print("‚úÖ –ì–æ—Ä–æ–¥ \(city.name) —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ `Persistence`")
        } else {
            print("‚úÖ –ì–æ—Ä–æ–¥ –≤—ã–±—Ä–∞–Ω —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫, –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ `Persistence`")
        }
    }


    

    func searchCityByLocation(latitude: Double, longitude: Double) {
           print("üìç –ò—â–µ–º –≥–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: \(latitude), \(longitude)")

           Task {
               do {
                   let results = try await cityService.fetchCityByLocation(latitude: latitude, longitude: longitude)
                   DispatchQueue.main.async {
                       self.cities = results
                                     
                                     if let firstCity = results.first {
                                         self.updateSelectedCity(city: firstCity)
                                         print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–ª–∏–∂–∞–π—à–∏–π –≥–æ—Ä–æ–¥: \(firstCity.name)")
                                     } else {
                                         print("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                                     }
                   }
               } catch {
                   DispatchQueue.main.async {
                       self.errorMessage = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ–¥–∞: \(error.localizedDescription)"
                   }
               }
           }
       }

    
    func searchCities(query: String) async {
        await MainActor.run { self.isSearching = true } // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–∏—Å–∫–∞

        print("üîç Searching cities... \(query)")

        do {
            let results = try await cityService.fetchCities(namePrefix: query)
            
            await MainActor.run {  // ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                self.cities = results
                self.errorMessage = nil
                self.isSearching = false // ‚úÖ –¢–µ–ø–µ—Ä—å —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
                print("‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤: \(self.cities.count)")
            }
        } catch {
            await MainActor.run {
                self.errorMessage = "‚ùå –û—à–∏–±–∫–∞: \(error.localizedDescription)"
                self.isSearching = false // ‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–∞–∂–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                print("‚ùå –û—à–∏–±–∫–∞: \(error.localizedDescription)")
            }
        }
    }
    
        func loadMockCitiesData() {
            if let cities: CityResponse = Bundle.main.decode("MockCities.json") {
                self.cities = cities.data
            }
    
            
        }
}
