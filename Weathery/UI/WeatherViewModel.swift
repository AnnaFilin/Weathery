////
////  WeatherViewModel.swift
////  Weathery
////
////  Created by Anna Filin on 06/02/2025.
////
//


import Foundation
import Combine
import CoreLocation



@MainActor
class WeatherViewModel: ObservableObject {
    @Published var location: CLLocationCoordinate2D?
    @Published var selectedCity: City? {
        didSet {
            let source = isUserSelectedCity ? "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" : "üîÑ –°–∏—Å—Ç–µ–º–∞"
            let time = Date().formatted(date: .omitted, time: .standard)
            print("üü° [\(time)] selectedCity –∏–∑–º–µ–Ω—ë–Ω: \(selectedCity?.name ?? "nil") (isUserSelectedCity = \(isUserSelectedCity)) [–ò—Å—Ç–æ—á–Ω–∏–∫: \(source)]")
            
            
            if let oldValue = oldValue, selectedCity?.id == oldValue.id {
                print("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! selectedCity –æ–±–Ω–æ–≤–∏–ª—Å—è –Ω–∞ —Ç–æ—Ç –∂–µ —Å–∞–º—ã–π –≥–æ—Ä–æ–¥!")
            }
        }
    }
    
    
    @Published var currentWeather: RealtimeWeatherResponse?
    @Published var forecast: DailyForecastResponse?
    @Published var hourlyForecast: HourlyForecastResponse?
    
    //    @Published var localHour: Int = Calendar.current.component(.hour, from: Date()) // –ó–∞–ø–∞—Å–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    @Published var localHour: Int = 12 // –ü—Ä–æ—Å—Ç–æ –ª—é–±–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–ª—É—á—à–µ `12`, —á–µ–º `Date()`)
    
    
    @Published var errorMessage: String?
    @Published var locationError: String?
    @Published var isLoading: Bool = false
    
    private let persistence: Persistence
    private let locationManager: LocationManager
    private let weatherService: WeatherServiceProtocol
    private let cityService: CitySearchServiceProtocol
    
    var isUserSelectedCity = false
    
    private var cancellables = Set<AnyCancellable>()
    
    init(
        persistence: Persistence,
        locationManager: LocationManager,
        weatherService: WeatherServiceProtocol = WeatherService(),
        cityService: CitySearchServiceProtocol = CitySearchService()
    ) {
        
        
        
        self.persistence = persistence
        self.locationManager = locationManager
        self.weatherService = weatherService
        self.cityService = cityService
        
        print("üÜï –°–æ–∑–¥–∞–Ω WeatherViewModel (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏)")
        
        $selectedCity
            .sink { [weak self] newCity in
                print("üü° selectedCity –∏–∑–º–µ–Ω—ë–Ω: \(newCity?.name ?? "nil") (isUserSelectedCity = \(self?.isUserSelectedCity ?? false))")
            }
            .store(in: &cancellables)
        
        locationManager.$location
            .sink { [weak self] newLocation in
                print("üìå [WeatherViewModel] –ü–æ–ª—É—á–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: \(String(describing: newLocation))")
                self?.location = newLocation
                self?.fetchCityForLocation(newLocation)
            }
            .store(in: &cancellables)
        
    }
    
    func requestLocation() {
        if let currentLocation = locationManager.location {
            print("‚úÖ –õ–æ–∫–∞—Ü–∏—è —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞: \(currentLocation.latitude), \(currentLocation.longitude)")
            return
        }
        
        
        print("üìç –ó–∞–ø—Ä–æ—Å –ª–æ–∫–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        locationManager.requestLocation()
    }
    
    func fetchCityForLocation(_ location: CLLocationCoordinate2D?) {
        guard let location = location else {
            print("‚ö†Ô∏è Location nil, –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º")
            return
        }
        
        Task {
            do {
                let cities = try await cityService.fetchCityByLocation(latitude: location.latitude, longitude: location.longitude)
                DispatchQueue.main.async {
                    if let firstCity = cities.first, !self.isUserSelectedCity {
                        self.selectedCity = firstCity
                        print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–ª–∏–∂–∞–π—à–∏–π –≥–æ—Ä–æ–¥: \(firstCity.name)")
                    }
else {
                        print("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    }
                }
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞: \(error.localizedDescription)")
            }
        }
    }
    
    func loadWeather() async {
        if let city = selectedCity {
            print("üåç –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è \(city.name)")
            await fetchWeatherData(for: city)
        } else if let location = location {
            print("üåç –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–≥–æ–¥—É –ø–æ –ª–æ–∫–∞—Ü–∏–∏: \(location.latitude), \(location.longitude)")
            await fetchWeatherDataForLocation(location)
        } else {
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≥–æ–¥—ã")
        }
    }
    
    
    func loadWeatherData(lat: Double, lon: Double) async {
        print("üåç –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: \(lat), \(lon)")
        
        do {
            self.isLoading = true
            
            async let current = weatherService.fetchCurrentWeather(lat: lat, lon: lon)
            async let daily = weatherService.fetchDailyForecast(lat: lat, lon: lon)
            async let hourly = weatherService.fetchHourlyForecast(lat: lat, lon: lon)
            
            let (currentWeather, forecast, hourlyForecast) = await (try current, try daily, try hourly)
            
            DispatchQueue.main.async {
                self.currentWeather = currentWeather
                self.forecast = forecast
                self.hourlyForecast = hourlyForecast
                self.isLoading = false
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            }
        } catch {
            DispatchQueue.main.async {
                self.errorMessage = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≥–æ–¥—ã: \(error.localizedDescription)"
                self.isLoading = false
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≥–æ–¥—ã: \(error.localizedDescription)")
            }
        }
    }
    
    func fetchWeatherData(for city: City) async {
        print("üåç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞: \(city.name)")
        
        self.selectedCity = city  // ‚ö°Ô∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
        print("üü° [WeatherViewModel] selectedCity –∏–∑–º–µ–Ω—ë–Ω: \(selectedCity?.name ?? "nil")")
        if isLoading {
            print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å")
            return
        }
        
        isLoading = true
        print("üåç –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞: \(city.name)")
        
        //        await loadWeatherData(lat: city.latitude, lon: city.longitude)
        loadMockWeatherData()
        await updateLocalHour() // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º localHour –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        
        isLoading = false
    }
    
    
    @MainActor
    func updateLocalHour() async {
        let newLocalHour = await getLocalHour()
        DispatchQueue.main.async {
            self.localHour = newLocalHour
            self.objectWillChange.send() // üí• –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ SwiftUI –æ–±–Ω–æ–≤–∏—Ç—Å—è
            print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º localHour: \(newLocalHour)")
        }
    }
    
    
    
    func fetchWeatherDataForLocation(_ location: CLLocationCoordinate2D) async {
        print("üåç –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: \(location.latitude), \(location.longitude)")
        
        Task {
            await updateLocalHour()
            //                     await loadWeatherData(lat: location.latitude, lon: location.longitude)
            loadMockWeatherData()
            
        }
    }
    
    
    func convertToLocalTime(_ utcDate: Date, latitude: Double, longitude: Double) async -> String {
        print("üåç –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é UTC -> –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è")
        
        let formatter = DateFormatter()
        formatter.dateFormat = "h:mm a"
        
        if let timeZone = await getTimeZone(for: latitude, longitude: longitude) {
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–∞–π–º–∑–æ–Ω–∞: \(timeZone.identifier)")
            formatter.timeZone = timeZone
        } else {
            print("‚ö†Ô∏è –¢–∞–π–º–∑–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º `.current`")
            formatter.timeZone = .current
        }
        
        let localTime = formatter.string(from: utcDate)
        print("üïí –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: \(localTime)")
        
        return localTime
    }
    
    func loadMockWeatherData() {
        if let currentWeather: RealtimeWeatherResponse = Bundle.main.decode("MockRealtimeWeather.json") {
            self.currentWeather = currentWeather
            print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –º–æ–∫-–¥–∞–Ω–Ω—ã–µ: currentWeather")
            
            let utcDate = currentWeather.weatherData.time // ‚úÖ API-–≤—Ä–µ–º—è (Date)
            print("üïí UTC –∏–∑ JSON (Date –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞): \(utcDate)")
            
            if let city = selectedCity {
                Task {
                    let localHour = await convertMockTimeToLocalHour(
                        utcDate: utcDate,
                        latitude: city.latitude,
                        longitude: city.longitude
                    )
                    
                    DispatchQueue.main.async {
                        self.localHour = localHour
                        print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º localHour –¥–ª—è \(city.name): \(localHour) —á–∞—Å–æ–≤")
                        
                        // üí• –§–æ—Ä—Å–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
                        self.objectWillChange.send()
                    }
                }
            }
            
            // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
            if let forecast: DailyForecastResponse = Bundle.main.decode("MockDailyForecast.json") {
                self.forecast = forecast
                print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –º–æ–∫-–¥–∞–Ω–Ω—ã–µ: forecast")
            }
            
            if let hourly: HourlyForecastResponse = Bundle.main.decode("MockHourlyForecast.json") {
                self.hourlyForecast = hourly
                print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –º–æ–∫-–¥–∞–Ω–Ω—ã–µ: hourlyForecast")
            }
        } else {
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö")
        }
    }
    
    
    
    
    func convertMockTimeToLocalHour(utcDate: Date, latitude: Double, longitude: Double) async -> Int {
        let timeZone = await getTimeZone(for: latitude, longitude: longitude) ?? TimeZone.current
        let formatter = DateFormatter()
        formatter.timeZone = timeZone
        formatter.dateFormat = "yyyy-MM-dd HH:mm:ss"
        
        let localDateString = formatter.string(from: utcDate)
        let localHour = Calendar.current.component(.hour, from: utcDate)
        
        print("üïí UTC Date: \(utcDate)")
        print("üåç Timezone: \(timeZone.identifier)")
        print("üïí Local Time (as String): \(localDateString)")
        print("üîÑ Local Hour: \(localHour)")
        
        return localHour
    }
    
    
    
    
    
    @MainActor
    func updateSelectedCity(city: City) {
        print("üìå –í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: \(city.name) [ID: \(city.id), –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: \(city.latitude), \(city.longitude)]")
        
        if selectedCity?.id == city.id {
            print("‚ö†Ô∏è –ì–æ—Ä–æ–¥ —É–∂–µ –≤—ã–±—Ä–∞–Ω, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º")
            return
        }
        print("üîÑ isUserSelectedCity –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ \(isUserSelectedCity)")
        
        isUserSelectedCity = true
        
        print("üîÑ –ú–µ–Ω—è–µ–º selectedCity –Ω–∞ \(city.name) (—Å—Ç–∞—Ä—ã–π –±—ã–ª \(selectedCity?.name ?? "nil"))")
        
        selectedCity = city
        
        
        print("üåç –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞: \(city.name)")
        //        
        Task {
            await updateLocalHour()
            //                     await fetchWeatherData(for: city)
            loadMockWeatherData()
            
        }
    }
    
    
    @MainActor
    func getLocalHour() async -> Int {
        guard let city = selectedCity,
              let utcDate = currentWeather?.weatherData.time else {
            print("‚ö†Ô∏è selectedCity –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É—é —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.")
            return Calendar.current.component(.hour, from: Date()) // –§–æ–ª–±—ç–∫
        }
        
        let timeZone = await getTimeZone(for: city.latitude, longitude: city.longitude) ?? TimeZone.current
        let calendar = Calendar.current
        var localCalendar = calendar
        localCalendar.timeZone = timeZone
        
        let localHour = localCalendar.component(.hour, from: utcDate)
        
        print("üïí API-–≤—Ä–µ–º—è (UTC): \(utcDate)")
        print("üåç –¢–∞–π–º–∑–æ–Ω–∞ –≥–æ—Ä–æ–¥–∞: \(timeZone.identifier)")
        print("‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π `localHour` –¥–ª—è \(city.name): \(localHour)")
        
        return localHour
    }
    
    
}
