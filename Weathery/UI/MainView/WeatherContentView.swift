////
////  WeatherContentView.swift
////  Weathery
////
////  Created by Anna Filin on 24/02/2025.
////
////

//
//  WeatherContentView.swift
//  Weathery
//
//  Created by Anna Filin on 24/02/2025.
//

import SwiftUI

struct WeatherContentView: View {
    @EnvironmentObject var persistence: Persistence
    @EnvironmentObject var weatherViewModel: WeatherViewModel
    @EnvironmentObject var selectedCityIndexStore: SelectedCityIndexStore
    
    @Binding var selectedTab: Int
    @State private var initialIndexSet = false
    @State var selectedCityIndex: Int = 0
    
    
    var body: some View {
        let favoriteCities = Array(persistence.favoritedCities)
        let hasUserLocationCity = weatherViewModel.userLocationCity != nil
        
        if hasUserLocationCity {
//            Text("–¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å: \(selectedCityIndexStore.selectedCityIndex)")
//                .foregroundColor(.blue)
//                .padding()
//            
//            Text( "‚≠ê [DEBUG] –°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤: \(favoriteCities.map { $0.name })")
//                .foregroundColor(.blue)
//                .padding()

            TabView(selection: $selectedCityIndexStore.selectedCityIndex) {
                
                // 1Ô∏è‚É£ User location city (if available)
                if let userLocationCity = weatherViewModel.userLocationCity {
                    Text("User Location city \(userLocationCity.name)")
                    CityWeatherView(
                        city: PersistentCity(from: userLocationCity),
                        selectedTab: $selectedTab
                    )
                    .id(userLocationCity.id)  // ‚úÖ –û—Å—Ç–∞–≤–∏–ª —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω `id`
                    .environmentObject(weatherViewModel)
                    .environmentObject(persistence)
                    .tag(0)
                }
           
                // 2Ô∏è‚É£ Favorite cities
                ForEach(Array(favoriteCities.enumerated()), id: \.element.id) { index, persistentCity in
                    CityWeatherView(
                        city: persistentCity,
                        selectedTab: $selectedTab
                    )
                    .environmentObject(weatherViewModel)
                    .environmentObject(persistence)
                    .tag(index + 1)
                }
                
                // 3Ô∏è‚É£ Selected city (if available)
                if let selectedCity = weatherViewModel.selectedCity {
                    
                    CityWeatherView(
                        city:PersistentCity(from: selectedCity) ,
                        selectedTab: $selectedTab
                    )
                    .environmentObject(weatherViewModel)
                    .environmentObject(persistence)
                    .tag(favoriteCities.count + (hasUserLocationCity ? 1 : 0))
                }
            }
            .tabViewStyle(.page)
            .background(Color.clear)
            
                    .onAppear {
                        print("üìç [DEBUG] WeatherContentView onAppear –≤—ã–∑–≤–∞–Ω")
//                        if !initialIndexSet, let userCity = weatherViewModel.userLocationCity {
//                            updateSelectedCityIndex(for: userCity)
//                            initialIndexSet = true
//                        }
                        if !initialIndexSet, let userCity = weatherViewModel.userLocationCity {
                              updateSelectedCityIndex(for: userCity)
                              initialIndexSet = true
                          }
                    }
                    .onChange(of: selectedCityIndexStore.selectedCityIndex) { oldIndex, newIndex in
                        print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∏–Ω–¥–µ–∫—Å: \(newIndex)")
                    }

            
                    .onChange(of: weatherViewModel.selectedCity) { oldValue, newSelectedCity in
                        guard let newSelectedCity, oldValue?.id != newSelectedCity.id else { return }
                        updateSelectedCityIndex(for: newSelectedCity)
                    }
            //        .onChange(of: weatherViewModel.userLocationCity) { oldValue, newUserCity in
            //            guard let newUserCity, oldValue?.id != newUserCity.id else { return }
            //            updateSelectedCityIndex(for: newUserCity)
            //        }
            
            
            
            .ignoresSafeArea()
        }  else {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è userLocationCity
                        Text("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...")
                            .onAppear {
                                print("üìç [DEBUG] –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...")
                            }
                    }
    }
    
    private func updateSelectedCityIndex(for city: City) {
        print("üü° updateSelectedCityIndex –≤—ã–∑–≤–∞–Ω –¥–ª—è: \(city.name)")
        let favoriteCities = Array(persistence.favoritedCities) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Set –≤ Array
        let hasUserLocationCity = weatherViewModel.userLocationCity != nil
        
        // 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥–æ—Ä–æ–¥ –≥–æ—Ä–æ–¥–æ–º –ª–æ–∫–∞—Ü–∏–∏ (–æ–Ω –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–π, –µ—Å–ª–∏ –µ—Å—Ç—å)
        if let userCity = weatherViewModel.userLocationCity, userCity.id == city.id {
            selectedCityIndexStore.selectedCityIndex = 0
            return
        }
        
        // 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ—Ä–æ–¥ –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö (–æ–Ω–∏ –∏–¥—É—Ç –ø–æ—Å–ª–µ userLocationCity)
        if let index = favoriteCities.firstIndex(where: { $0.id == city.id }) {
            selectedCityIndexStore.selectedCityIndex = index + (hasUserLocationCity ? 1 : 0)
            return
        }
        
        // 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥–æ—Ä–æ–¥ `selectedCity` (–æ–Ω –∏–¥—ë—Ç –ø–æ—Å–ª–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö)
        if let selectedCity = weatherViewModel.selectedCity, selectedCity.id == city.id {
            selectedCityIndexStore.selectedCityIndex = favoriteCities.count + (hasUserLocationCity ? 1 : 0)
            return
        }
        
        // 4Ô∏è‚É£ –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
        selectedCityIndexStore.selectedCityIndex = 0
    }
    
}

