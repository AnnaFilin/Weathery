//
//  WeatherBackgroundView.swift
//  Weathery
//
//  Created by Anna Filin on 02/02/2025.
//

import SwiftUI

struct WeatherBackground: ViewModifier {
    var condition: String
//    let currentHour = 22Calendar.current.component(.hour, from: Date())
    @Binding  var localHour: Int
    
    
    func body(content: Content) -> some View {
        ZStack {
            // –§–æ–Ω –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
            LinearGradient(
//                gradient: Gradient(colors: backgroundColor(condition: condition)),
                gradient: Gradient(colors: backgroundColor(condition: condition, hour: localHour)),
                startPoint: .top,
                endPoint: .bottom
            )
            .ignoresSafeArea()
            
            //            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–∞–∫–∞, –µ—Å–ª–∏ –ø–æ–≥–æ–¥–∞ –æ–±–ª–∞—á–Ω–∞—è
            if condition == "Cloudy" {
                CloudView()
                    .offset(y: -100) // –†–∞–∑–º–µ—â–∞–µ–º –≤—ã—à–µ —Ü–µ–Ω—Ç—Ä–∞
                CloudView()
                    .offset(y: 50) // –ù–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ
                    .scaleEffect(0.8) // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä
            }
           
            if condition == "Rain" {
                RainView()
                    .frame(maxWidth: .infinity, maxHeight: .infinity, alignment: .top) // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä
//                    .zIndex(1)
            }

            //            
            //            if condition == "Snow" {
            //                SnowView()
            ////                    .offset(x: 100) // –†–∞–∑–º–µ—â–∞–µ–º –≤—ã—à–µ —Ü–µ–Ω—Ç—Ä–∞
            //
            //            }
            //            if currentHour < 18 {
            //                SunView()
            //                Text(String(currentHour))
            ////                    .offset(x: 100) // –†–∞–∑–º–µ—â–∞–µ–º –≤—ã—à–µ —Ü–µ–Ω—Ç—Ä–∞
            //
            //            }
            //            
            //            if currentHour >= 18 {
            //                MoonView()
            //                Text(String(currentHour))
            //
            ////                    .offset(x: 100) // –†–∞–∑–º–µ—â–∞–µ–º –≤—ã—à–µ —Ü–µ–Ω—Ç—Ä–∞
            //
            //            }
            
            // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–≤–µ—Ä—Ö —Ñ–æ–Ω–∞
            content
        }
        .id(localHour)
        .onChange(of: localHour) { _, newHour in
//            print("üîÑ localHour –∏–∑–º–µ–Ω—ë–Ω –≤ WeatherBackground: \(newHour)")
            print("üîÑ WeatherBackground: localHour –æ–±–Ω–æ–≤–∏–ª—Å—è: \(newHour)")

        }
        .foregroundColor(.white)
    }
    
//    private func backgroundColor(condition: String) -> [Color] {
//        switch condition {
//        case "Rain":
//            return [Color("greyColor"), Color("skyBlueColor")]
//        case "Snow":
//            return [Color("whiteColor"), Color("skyBlueColor")]
//        case "Cloudy":
//            return [Color("greyColor"), Color("whiteColor")]
//        case "Clear":
//
//            if currentHour >= 6 && currentHour < 9 {
//                return [Color("lightBlueColor"), Color("goldColor"), Color("lemonChiffonColor"), Color("royalBlueColor"),]
//            }
//
//            else if currentHour >= 9 && currentHour < 17 {
//                return [Color("skyBlueColor"), Color("lightBlueColor")] // Color("orangeColor"),, Color("whiteColor")
//            }
//
//            else if currentHour >= 17 && currentHour < 20 {
//                return [Color("royalBlueColor"),Color("crimsonColor"), Color("darkOrangeColor"), Color("darkOrchidColor"), Color("darkSlateBlueColor"),] //, Color("deepPinkColor")
//            }
//
//            else {
//                return [ Color("darkSlateBlueColor"), Color("midnightBlueColor"),] //, Color("indigoColor")
//            }
//        default:
//
//            return [Color("skyBlueColor"), Color("greyColor")]
//        }
//    }
    
//    private func backgroundColor(condition: String) -> [Color] {
//    private func backgroundColor(condition: String, hour: Int) -> [Color] {
//        print("üé® –ú–µ–Ω—è–µ–º —Ñ–æ–Ω: –£—Å–ª–æ–≤–∏–µ - \(condition), –í—Ä–µ–º—è - \(hour)")
//        print("–õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: \(hour)")
////        print("üé® –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ–Ω –¥–ª—è \(condition) –≤ \(hour) —á–∞—Å–æ–≤: \(backgroundColor(condition: condition, hour: hour))")
//
//
//        var baseColors: [Color] = []
//
//        // üåÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
//        switch hour {
//        case 0..<6:
//            baseColors = [Color("darkSlateBlueColor"), Color("midnightBlueColor")]
//        case 6..<9:
//            baseColors = [Color("lightBlueColor"), Color("goldColor"), Color("lemonChiffonColor"), Color("royalBlueColor")]
//        case 9..<17:
//            baseColors = [Color("skyBlueColor"), Color("lightBlueColor")]
//        case 17..<20:
//            baseColors = [Color("royalBlueColor"), Color("crimsonColor"), Color("darkOrangeColor"), Color("darkOrchidColor"), Color("darkSlateBlueColor")]
//        default:
//            baseColors = [Color("darkSlateBlueColor"), Color("midnightBlueColor")]
//        }
//
//        // üåß –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≥–æ–¥–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
//        switch condition {
//        case "Rain":
//            return baseColors.map { $0.opacity(0.7) } + [Color("greyColor")]
//        case "Snow":
//            return baseColors.map { $0.opacity(0.85) } + [Color("whiteColor")]
//        case "Cloudy":
//            return baseColors.map { $0.opacity(0.8) } + [Color("greyColor")]
//        default:
//            return baseColors // –ï—Å–ª–∏ —è—Å–Ω–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
//        }
//    }
    private func backgroundColor(condition: String, hour: Int) -> [Color] {
        print("üé® –ú–µ–Ω—è–µ–º —Ñ–æ–Ω: –£—Å–ª–æ–≤–∏–µ - \(condition), –í—Ä–µ–º—è - \(hour)")

        var baseColors: [Color] = []

        // üåÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        switch hour {
        case 0..<6: // –ù–æ—á—å
            baseColors = [Color("darkSlateBlueColor"), Color("midnightBlueColor")]
        case 6..<9: // –†–∞—Å—Å–≤–µ—Ç
            baseColors = [Color("lightBlueColor"), Color("goldColor"), Color("lemonChiffonColor"), Color("royalBlueColor")]
        case 9..<17: // –î–µ–Ω—å
            baseColors = [Color("skyBlueColor"), Color("lightBlueColor")]
        case 17..<20: // –ó–∞–∫–∞—Ç
            baseColors = [Color("royalBlueColor"), Color("crimsonColor"), Color("darkOrangeColor"), Color("darkOrchidColor"), Color("darkSlateBlueColor")]
        default: // –ü–æ–∑–¥–Ω–∏–π –≤–µ—á–µ—Ä
            baseColors = [Color("darkSlateBlueColor"), Color("midnightBlueColor")]
        }

        // üåß –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≥–æ–¥–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        switch condition {
        case "Rain":
            baseColors = baseColors.map { $0.opacity(0.7) } + [Color("greyColor")]
        case "Snow":
            baseColors = baseColors.map { $0.opacity(0.85) } + [Color("whiteColor")]
        case "Cloudy":
            baseColors = baseColors.map { $0.opacity(0.8) } + [Color("greyColor")]
        case "Thunderstorm":
            baseColors = [Color("darkSlateBlueColor"), Color("black")] // –ì—Ä–æ–∑–æ–≤–æ–π —Ç—ë–º–Ω—ã–π —Ñ–æ–Ω
        case "Fog":
            baseColors = [Color("greyColor"), Color("lightGray")] // –¢—É–º–∞–Ω
        case "Drizzle":
            baseColors = baseColors.map { $0.opacity(0.75) } + [Color("lightGray")]
        case "Clear":
            break // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—ã–µ –∏ –Ω–æ—á–Ω—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        default:
            baseColors = [Color("skyBlueColor"), Color("greyColor")]
        }

        print("üé® –ò—Ç–æ–≥–æ–≤—ã–π —Ñ–æ–Ω: \(baseColors)")
        return baseColors
    }

    
//
    func tabBarColor(condition: String) -> UIColor {
        switch condition {
        case "Rain":
            return UIColor.systemBlue.withAlphaComponent(0.8) // –¢—ë–º–Ω–æ-—Å–∏–Ω–∏–π
        case "Snow":
            return UIColor.white.withAlphaComponent(0.8) // –°–≤–µ—Ç–ª—ã–π, –Ω–æ –∑–∞—Ç–µ–º–Ω—ë–Ω–Ω—ã–π
        case "Cloudy":
            return UIColor.gray.withAlphaComponent(0.9) // –°–µ—Ä—ã–π, –∫–∞–∫ –æ–±–ª–∞–∫–∞
        case "Clear":
            return UIColor.systemTeal.withAlphaComponent(0.9) // –ì–æ–ª—É–±–æ–π
        default:
            return UIColor.systemGray
        }
    }

}
  
