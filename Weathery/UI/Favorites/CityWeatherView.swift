//////
//////  CityWeatherView.swift
//////  Weathery
//////
//////  Created by Anna Filin on 21/02/2025.
//////
////
//import SwiftUI
//import SwiftUI


import SwiftUI

enum ForecastType: Identifiable {
    case daily
    case weekly
    case hourly
    
    var id: Self { self }
}

struct CityWeatherView: View {
    @EnvironmentObject var weatherViewModel: WeatherViewModel
    @EnvironmentObject var citySearchViewModel: CitySearchViewModel
    @EnvironmentObject var persistence: Persistence
    
    var city: PersistentCity
    @State private var weatherData: (RealtimeWeatherResponse?, DailyForecastResponse?, HourlyForecastResponse?) = (nil, nil, nil) // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
//    @State private var isLoading: Bool = true // ‚úÖ –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
    
    @State var selectedForecastType: ForecastType?
    @State var selectedDay: Daily?
    @State private var showSheet = false
    @State private var showAdditionalContent = false
    @Binding var selectedTab: Int

 
    var effectiveWeatherData: (RealtimeWeatherResponse?, DailyForecastResponse?, HourlyForecastResponse?) {
        if let cached = weatherData.0 {
//            print("üìå [DEBUG] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è \(city.name)")
            return weatherData
        } else if city.id == weatherViewModel.userLocationCity?.id {
//            print("üìå [DEBUG] –ò—Å–ø–æ–ª—å–∑—É–µ–º userLocationWeather –¥–ª—è \(city.name)")
            return weatherViewModel.userLocationWeather
        } else {
//            print("üìå [DEBUG] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è \(city.name), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º nil")
            return (nil, nil, nil)
        }
    }

    
    
    var day: Int {
           let calendar = Calendar.current
           return calendar.component(.day, from: Date())
       }
   //
       var formattedDate: String {
           let dateFormatter = DateFormatter()
           dateFormatter.dateFormat = "MMM d, yy"
           return dateFormatter.string(from: Date())
       }
   
       var weatherEaster: String? {
           guard let currentWeather = effectiveWeatherData.0 else { return nil }
           return WeatherEasterEggs.getEasterEgg(for: currentWeather.weatherData.values.weatherCode)
       }
   


   
       var weatherIcon: String {
           guard let currentWeather = effectiveWeatherData.0 else { return "unknown_large" }
           guard let weatherCode = weatherCodes[currentWeather.weatherData.values.weatherCode] else {
               return "unknown_large"
           }
           return isDaytime ? weatherCode.iconDay : (weatherCode.iconNight ?? weatherCode.iconDay)
       }
    
    
    var weatherDescription: String {
        guard let currentWeather = effectiveWeatherData.0 else { return "Unknown" }
        return getWeatherDescription(for: currentWeather.weatherData.values.weatherCode, isDaytime: isDaytime)
    }

    var isDaytime: Bool {
        guard let forecast = effectiveWeatherData.1 else { return true }
        return forecast.timelines.daily[0].isDaytime
    }

    var body: some View {
//        VStack {
//        if isLoading {
                    // ‚úÖ –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∏–¥—ë—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
//                    VStack {
//                        Text("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è \(city.name)...")
//                            .font(.headline)
//                            .foregroundColor(.gray)
//                            .padding()
//                        ProgressView()
//                    }
//                } else if effectiveWeatherData.0 != nil {
//                    // ‚úÖ –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
//                    VStack(alignment: .leading, spacing: 10) {
//                        Text("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: \(effectiveWeatherData.0!.weatherData.values.temperature)¬∞C")
//                            .font(.largeTitle)
//        
        
        VStack(alignment: .leading, spacing: 10) {
//            //
//            if let temperature = effectiveWeatherData.0?.weatherData.values.temperature {
//                Text("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: \(temperature)¬∞C")
//                    .font(.largeTitle)
//            } else {
//                Text("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è \(city.name)...")
//                    .font(.headline)
//                    .foregroundColor(.gray)
//            }
//            
//            // üõ† –î–µ–±–∞–∂–Ω—ã–π —Ç–µ–∫—Å—Ç, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
//            Text("üå° –î–µ–±–∞–≥: \(effectiveWeatherData.0?.weatherData.values.temperature != nil ? "\(effectiveWeatherData.0!.weatherData.values.temperature)¬∞C" : "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")")
//                .foregroundColor(.red)
//                .font(.caption)
            
//            if effectiveWeatherData.0 != nil {
                                   if let currentWeather = effectiveWeatherData.0 {
                WeatherSummaryView(
                    city: city.toCity(),
                    weatherDescription: weatherDescription,
                                               currentWeather: currentWeather,
//                    currentWeather: effectiveWeatherData.0!,
                    weatherEaster: weatherEaster,
                    formattedDate: formattedDate,
                    weatherIcon: weatherIcon,
                    selectedTab: $selectedTab
                )
                .environmentObject(weatherViewModel)
                                   }
                
                Spacer(minLength: 100)
                
                ScrollView {
                    if let dailyForecast = effectiveWeatherData.1, let hourlyForecast = effectiveWeatherData.2 {
                        ForecastCardsView(
                            dailyForecast: dailyForecast,
                            hourlyForecast: hourlyForecast,
                            weatherDescription: weatherDescription,
                            weatherIcon: weatherIcon,
                            selectedForecastType: $selectedForecastType,
                            selectedDay: $selectedDay,
                            showSheet: $showSheet
                        )
                    }
                }
                .sheet(item: $selectedForecastType) { type in
                    switch type {
                    case .daily:
                        if let day = selectedDay {
                            DetailedWeatherSheet(dayForecast: day)
                                .id(UUID())
                                .presentationDragIndicator(.visible)
                        } else {
                            Text("Error: `selectedDay` is nil")
                        }
                    case .weekly:
                        WeeklyForecastSheet(forecast: effectiveWeatherData.1!.timelines.daily)
                    case .hourly:
                        HourlyForecastSheet(hourlyForecast: effectiveWeatherData.2!.timelines.hourly)
                    }
                }
                .id(selectedDay?.id)

//                          }
//            }
//            else {
//                            // ‚úÖ –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–∫ –∏ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
//                            VStack {
//                                Text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è \(city.name)")
//                                    .font(.headline)
//                                    .foregroundColor(.red)
//                                    .padding()
//                            }
//                        }

        }
        .modifier(WeatherBackground(condition: weatherDescription, localHour: Binding(
                get: { weatherViewModel.localHour ?? 12 },
                set: { weatherViewModel.localHour = $0 }
            )))
        .onAppear {
//            if let userCity = weatherViewModel.userLocationCity {
//                print("üåç [DEBUG] –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è userLocationCity: \(userCity.name)")
            loadWeatherIfNeeded(for: city )
//            } else {
//                print("‚ùå userLocationCity –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ")
//            }
        }
//
//        .onReceive(weatherViewModel.$userLocationWeather) { newWeatherData in
//            if city.id == weatherViewModel.userLocationCity?.id {
//                self.weatherData = newWeatherData
//                print("üîÑ userLocationWeather –æ–±–Ω–æ–≤–ª–µ–Ω–æ: \(newWeatherData.0?.weatherData.values.temperature ?? -999)¬∞C")
//                isLoading = false // ‚úÖ –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
//            }
//        }

    }

    /// **‚úÖ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö**
    private func loadWeatherIfNeeded(for city: PersistentCity) {
        print("üåç Checking weather for \(city.name)")
        
        let cachedData = persistence.getWeatherData(for: city.toCity())

        if let cachedRealtime = cachedData.0 {
            let lastUpdate = cachedRealtime.weatherData.time
            let currentTime = Date()

            let cacheValidity: TimeInterval = 3 * 3600 // 3 —á–∞—Å–∞

            if currentTime.timeIntervalSince(lastUpdate) < cacheValidity {
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è \(city.name)")
                weatherData = cachedData
//                isLoading = false
                return
            } else {
                print("‚ö†Ô∏è –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –¥–ª—è \(city.name), –æ–±–Ω–æ–≤–ª—è–µ–º...")
            }
        } else {
            print("‚ùå –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º...")
        }

        print("üå®Ô∏è Fetching weather for \(city.name)...")

        Task {
            print("üåç [DEBUG] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–≥–æ–¥—ã –¥–ª—è \(city.name)")

            let isUserLocation = city.id == weatherViewModel.userLocationCity?.id

            do {
                print("üìç –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è \(city.name), –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: \(city.latitude), \(city.longitude)")

                try await weatherViewModel.fetchWeather(for: city.toCity(), isUserLocation: isUserLocation)

                DispatchQueue.main.async {
                    self.weatherData = isUserLocation ? self.weatherViewModel.userLocationWeather : self.weatherViewModel.selectedCityWeather
//                    isLoading = false // ‚úÖ –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∫–ª—é—á–∞–µ–º –ª–æ–∞–¥–µ—Ä
                }
            } catch WeatherError.tooManyRequests {
                print("üö® –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
//                isLoading = false
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≥–æ–¥—ã: \(error)")
//                isLoading = false
            }
        }
    }
}

