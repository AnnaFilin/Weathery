//
//  File.swift
//  Weathery
//
//  Created by Anna Filin on 04/02/2025.
//
import Foundation
////
extension Bundle {
    func decode<T: Codable>(_ file: String) -> T {
        guard let url = self.url(forResource: file, withExtension: nil) else {
            fatalError("Failed to locate \(file) in bundle.")
        }

        guard let data = try? Data(contentsOf: url) else {
            fatalError("Failed to load \(file) from bundle.")
        }

        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .iso8601
        
//        if let jsonString = String(data: data, encoding: .utf8) {
//            print("JSON –∏–∑ —Ñ–∞–π–ª–∞:\n\(jsonString)")
//        }

        do {
            return try decoder.decode(T.self, from: data)
        } catch DecodingError.keyNotFound(let key, let context) {
            fatalError("Failed to decode \(file) from bundle due to missing key '\(key.stringValue)' ‚Äì \(context.debugDescription)")
        } catch DecodingError.typeMismatch(_, let context) {
            fatalError("Failed to decode \(file) from bundle due to type mismatch ‚Äì \(context.debugDescription)")
        } catch DecodingError.valueNotFound(let type, let context) {
            fatalError("Failed to decode \(file) from bundle due to missing \(type) value ‚Äì \(context.debugDescription)")
        } catch DecodingError.dataCorrupted(_) {
            fatalError("Failed to decode \(file) from bundle because it appears to be invalid JSON.")
        } catch {
            fatalError("Failed to decode \(file) from bundle: \(error.localizedDescription)")
        }
    }
}

//extension Bundle {
//    func decode<T: Codable>(_ file: String) -> T {
//        guard let url = self.url(forResource: file, withExtension: nil) else {
//            fatalError("‚ùå Failed to locate \(file) in bundle.")
//        }
//
//        guard let data = try? Data(contentsOf: url) else {
//            fatalError("‚ùå Failed to load \(file) from bundle.")
//        }
//
//        let decoder = JSONDecoder()
//        decoder.dateDecodingStrategy = .iso8601 // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ ISO 8601 –¥–ª—è –¥–∞—Ç
//
//        // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ ‚Äî –≤—ã–≤–æ–¥ JSON, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞
//        if let jsonString = String(data: data, encoding: .utf8) {
//            print("üìÑ JSON –∏–∑ —Ñ–∞–π–ª–∞:\n\(jsonString)")
//        }
//
//        do {
//            // –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
//            return try decoder.decode(T.self, from: data)
//        } catch DecodingError.keyNotFound(let key, let context) {
//            print("üîë –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '\(key.stringValue)' ‚Äî \(context.debugDescription)")
//            fatalError("‚ùå Failed to decode \(file) due to missing key '\(key.stringValue)'.")
//        } catch DecodingError.typeMismatch(let type, let context) {
//            print("üîÑ –û—à–∏–±–∫–∞: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∞ –¥–ª—è \(type) ‚Äî \(context.debugDescription)")
//            fatalError("‚ùå Failed to decode \(file) due to type mismatch for \(type).")
//        } catch DecodingError.valueNotFound(let type, let context) {
//            print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–∞ \(type) ‚Äî \(context.debugDescription)")
//            fatalError("‚ùå Failed to decode \(file) due to missing \(type) value.")
//        } catch DecodingError.dataCorrupted(let context) {
//            print("üõ†Ô∏è –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã ‚Äî \(context.debugDescription)")
//            fatalError("‚ùå Failed to decode \(file) due to corrupted data.")
//        } catch {
//            print("‚ùóÔ∏è –û—à–∏–±–∫–∞: \(error.localizedDescription)")
//            fatalError("‚ùå Failed to decode \(file): \(error.localizedDescription)")
//        }
//    }
//}


//import Foundation
//
//extension Bundle {
//    func decode<T: Codable>(_ file: String) -> T? {
//        guard let url = self.url(forResource: file, withExtension: nil) else {
//            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ \(file) –≤ –±–∞–Ω–¥–ª–µ.")
//            return nil
//        }
//
//        guard let data = try? Data(contentsOf: url) else {
//            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å \(file) –∏–∑ –±–∞–Ω–¥–ª–∞.")
//            return nil
//        }
//
//        let decoder = JSONDecoder()
//        decoder.dateDecodingStrategy = .iso8601 // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ISO 8601 –¥–ª—è –¥–∞—Ç
//
//        // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏: –≤—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ JSON
//        if let jsonString = String(data: data, encoding: .utf8) {
//            print("üìÑ JSON –∏–∑ —Ñ–∞–π–ª–∞:\n\(jsonString)")
//        }
//
//        do {
//            // –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
//            return try decoder.decode(T.self, from: data)
//        } catch DecodingError.keyNotFound(let key, let context) {
//            print("üîë –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '\(key.stringValue)' ‚Äî \(context.debugDescription)")
//        } catch DecodingError.typeMismatch(let type, let context) {
//            print("üîÑ –û—à–∏–±–∫–∞: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∞ \(type) ‚Äî \(context.debugDescription)")
//        } catch DecodingError.valueNotFound(let type, let context) {
//            print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–∞ \(type) ‚Äî \(context.debugDescription)")
//        } catch DecodingError.dataCorrupted(let context) {
//            print("üõ†Ô∏è –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã ‚Äî \(context.debugDescription)")
//        } catch {
//            print("‚ùóÔ∏è –û–±—â–∞—è –æ—à–∏–±–∫–∞: \(error.localizedDescription)")
//        }
//
//        // –í–æ–∑–≤—Ä–∞—Ç nil –≤–º–µ—Å—Ç–æ –∫—Ä–∞—Ö–∞
//        return nil
//    }
//}

//
//extension Bundle {
//    func decode<T: Codable>(_ file: String) -> T {
//        guard let url = self.url(forResource: file, withExtension: nil) else {
//            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª \(file) –≤ Bundle.")
////            return nil
//            fatalError("Failed to locate \(file) in bundle.")
//        }
//
//        guard let data = try? Data(contentsOf: url) else {
//            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ \(file).")
////            return nil
//            fatalError("Failed to locate \(file) in bundle.")
//        }
//
//        let decoder = JSONDecoder()
//        decoder.dateDecodingStrategy = .iso8601
//
//        // üîπ –û—Ç–ª–∞–¥–∫–∞: –í—ã–≤–æ–¥ JSON –ø–µ—Ä–µ–¥ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
//        if let jsonString = String(data: data, encoding: .utf8) {
//            print("üìÑ JSON –∏–∑ —Ñ–∞–π–ª–∞:\n\(jsonString)")
//        }
//
//        do {
//            let decodedData = try decoder.decode(T.self, from: data)
//            return decodedData
//        } catch DecodingError.keyNotFound(let key, let context) {
//            print("üîë –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '\(key.stringValue)' ‚Äî \(context.debugDescription)")
//        } catch DecodingError.typeMismatch(let type, let context) {
//            print("üîÑ –û—à–∏–±–∫–∞: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∞ –¥–ª—è \(type) ‚Äî \(context.debugDescription)")
//        } catch DecodingError.valueNotFound(let type, let context) {
//            print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–∞ \(type) ‚Äî \(context.debugDescription)")
//        } catch DecodingError.dataCorrupted(let context) {
//            print("üõ†Ô∏è –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã ‚Äî \(context.debugDescription)")
//        } catch {
//            print("‚ùóÔ∏è –û—à–∏–±–∫–∞: \(error.localizedDescription)")
//        }
//
////        return nil
//    }
//}
