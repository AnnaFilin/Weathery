//
//  TomorrowTileOverlay.swift
//  Weathery
//
//  Created by Anna Filin on 14/02/2025.
//
//
//import MapKit
//
//class TomorrowTileOverlay: MKTileOverlay {
//    private let apiKey = Config.apiKey
//    private let layer: String
//
//    init(layer: String) {
//        self.layer = layer // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ–π
//        super.init(urlTemplate: nil)
//    }
//
//    override func url(forTilePath path: MKTileOverlayPath) -> URL {
//        let urlString = "https://api.tomorrow.io/v4/map/tile/\(path.z)/\(path.x)/\(path.y)/\(layer)/latest.png?apikey=\(apiKey)"
//        
//        print("üåç Requesting tile for map...: \(urlString)") // –î–ª—è –¥–µ–±–∞–≥–∞
//
//        return URL(string: urlString)!
//    }
//}
//
//class TomorrowTileRenderer: MKTileOverlayRenderer {
//    override func draw(_ mapRect: MKMapRect, zoomScale: MKZoomScale, in context: CGContext) {
//        context.setAlpha(0.6)
//        super.draw(mapRect, zoomScale: zoomScale, in: context)
//    }
//}
//import MapKit
//
//class TomorrowTileOverlay: MKTileOverlay {
//    private let apiKey = "J4s4GPeC0EGsUGXTCaqrQM1e2bYmt7Aq" // üî• –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π API-–∫–ª—é—á
//     let layer: String
//
////    let timestamp = Int(Date().timeIntervalSince1970) // —Ç–µ–∫—É—â–∏–π Unix timestamp
////    var urlString: String
////    let useMockData = true
//
////    init(layer: String, urlString: String) {
////        self.layer = layer
////        self.urlString = urlString
////                super.init(urlTemplate: nil)
////    }
//    init(layer: String) {
//        self.layer = layer // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ–π
//  super.init(urlTemplate: nil)
//    }
//
////    override func url(forTilePath path: MKTileOverlayPath) -> URL {
//////        let urlString = "https://api.tomorrow.io/v4/map/tile/\(path.z)/\(path.x)/\(path.y)/\(layer)/latest.png?apikey=\(apiKey)"
////        let           urlString = "https://api.tomorrow.io/v4/map/tile/\(path.z)/\(path.x)/\(path.y)/\(layer)/latest.png?apikey=\(apiKey)"
////
////
//////        if useMockData {
//////            urlString = "https://via.placeholder.com/256" // –§–µ–π–∫–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
//////        } else {
////////            let timestamp = Int(Date().timeIntervalSince1970)
//////            //        let urlString = "https://api.tomorrow.io/v4/map/tile/\(path.z)/\(path.x)/\(path.y)/\(layer)/\(timestamp).png?apikey=\(apiKey)"
//////            urlString = "https://api.tomorrow.io/v4/map/tile/\(path.z)/\(path.x)/\(path.y)/\(layer)/latest.png?apikey=\(apiKey)"
//////        }
////
////        
////        print("üåç –ó–∞–ø—Ä–æ—Å —Ç–∞–π–ª–∞: \(urlString)") // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥—É—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å—ã
////
////        return URL(string: urlString)!
////    }
//    
//    override func url(forTilePath path: MKTileOverlayPath) -> URL {
//        let urlString = "https://api.tomorrow.io/v4/map/tile/\(path.z)/\(path.x)/\(path.y)/\(layer)/latest.png?apikey=\(apiKey)"
//        
//        print("üåç –ó–∞–ø—Ä–æ—Å —Ç–∞–π–ª–∞: \(urlString)") // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
//
//        
//        if let cachedResponse = URLCache.shared.cachedResponse(for: URLRequest(url: URL(string: urlString)!)) {
//            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∞–π–ª: \(urlString)")
//            return URL(string: "data:image/png;base64,\(cachedResponse.data.base64EncodedString())")!
//        }
//        
//        print("üåç –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ —Ç–∞–π–ª–∞: \(urlString)")
//        return URL(string: urlString)!
//    }
//
//}
//
//// ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞—ë–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Ç–∞–π–ª–æ–≤
//class TomorrowTileRenderer: MKTileOverlayRenderer {
//    override func draw(_ mapRect: MKMapRect, zoomScale: MKZoomScale, in context: CGContext) {
//        context.setAlpha(1.0) // üî• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
//        super.draw(mapRect, zoomScale: zoomScale, in: context)
//    }
//}


import MapKit

class TomorrowTileOverlay: MKTileOverlay {
    private let apiKey = "J4s4GPeC0EGsUGXTCaqrQM1e2bYmt7Aq" // üî• –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π API-–∫–ª—é—á
    let layer: String

    init(layer: String) {
        self.layer = layer
        super.init(urlTemplate: nil)
    }

    override func url(forTilePath path: MKTileOverlayPath) -> URL {
        let urlString = "https://api.tomorrow.io/v4/map/tile/\(path.z)/\(path.x)/\(path.y)/\(layer)/latest.png?apikey=\(apiKey)"
        
        print("üåç URL —Ç–∞–π–ª–∞: \(urlString)") // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤

        return URL(string: urlString)!
    }
}

// ‚úÖ –†–µ–Ω–¥–µ—Ä–µ—Ä —Ç–∞–π–ª–æ–≤, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
class TomorrowTileRenderer: MKTileOverlayRenderer {
    override func draw(_ mapRect: MKMapRect, zoomScale: MKZoomScale, in context: CGContext) {
        print("üé® –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–∞–π–ª—ã, ZoomScale: \(zoomScale)")
        context.setAlpha(1.0) // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        super.draw(mapRect, zoomScale: zoomScale, in: context)
    }
}
