//
//  CitiesService.swift
//  Weathery
//
//  Created by Anna Filin on 16/02/2025.
//

import Foundation

class CitySearchService: CitySearchServiceProtocol {
    private let baseURL = "https://wft-geo-db.p.rapidapi.com/v1/geo/cities"
    private let apiKey = Config.citiesApiKey
    
    func fetchCities(namePrefix: String) async throws -> [City] {
        var components = URLComponents(string: baseURL)!
        components.queryItems = [
            URLQueryItem(name: "namePrefix", value: namePrefix),
            URLQueryItem(name: "limit", value: "10")
        ]
        
        var request = URLRequest(url: components.url!)
        request.httpMethod = "GET"
        request.timeoutInterval = 10
        request.allHTTPHeaderFields = [
            "x-rapidapi-key": apiKey,
            "x-rapidapi-host": "wft-geo-db.p.rapidapi.com"
        ]
        
        return try await fetchCitiesData(from: request)
    }
    
//    func fetchCityByLocation(latitude: Double, longitude: Double) async throws -> [City] {
//        let formattedLocation = formatCoordinatesISO6709(latitude: latitude, longitude: longitude)
//
//        var components = URLComponents(string: baseURL)!
//        components.queryItems = [
//            URLQueryItem(name: "location", value: formattedLocation), // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
//            URLQueryItem(name: "limit", value: "1") // ‚úÖ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 1 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
//        ]
//
//        var request = URLRequest(url: components.url!)
//        request.httpMethod = "GET"
//        request.timeoutInterval = 10
//        request.allHTTPHeaderFields = [
//            "x-rapidapi-key": apiKey,
//            "x-rapidapi-host": "wft-geo-db.p.rapidapi.com"
//        ]
//
//        print("üåç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: https://wft-geo-db.p.rapidapi.com/v1/geo/cities?location=\(latitude),\(longitude)&limit=1")
//
//        
//        return try await fetchCitiesData(from: request)
//    }

    func fetchCityByLocation(latitude: Double, longitude: Double) async throws -> [City] {
        let formattedLocation = formatCoordinatesForGeoDB(latitude: latitude, longitude: longitude) // ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã

        // ‚úÖ –°–æ–±–∏—Ä–∞–µ–º URL –≤—Ä—É—á–Ω—É—é, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        let urlString = "https://wft-geo-db.p.rapidapi.com/v1/geo/cities?location=\(formattedLocation)&limit=1"
        print("üåç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ API: \(urlString)") // üîç –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –∑–∞–ø—Ä–æ—Å–∞

        var request = URLRequest(url: URL(string: urlString)!)
        request.httpMethod = "GET"
        request.timeoutInterval = 10
        request.allHTTPHeaderFields = [
            "x-rapidapi-key": apiKey,
            "x-rapidapi-host": "wft-geo-db.p.rapidapi.com"
        ]

        do {
            let (data, response) = try await URLSession.shared.data(for: request)
            
            if let httpResponse = response as? HTTPURLResponse {
                print("üîÑ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: \(httpResponse.statusCode)") // ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º HTTP-—Å—Ç–∞—Ç—É—Å

                if httpResponse.statusCode != 200 {
                    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞, –∫–æ–¥: \(httpResponse.statusCode)")
                    throw NSError(domain: "API Error", code: httpResponse.statusCode, userInfo: nil)
                }
            }

            let jsonResponse = String(data: data, encoding: .utf8) ?? "‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON"
            print("üì° –û—Ç–≤–µ—Ç API: \(jsonResponse)") // üîç –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API

            let decoder = JSONDecoder()
            decoder.keyDecodingStrategy = .convertFromSnakeCase
            let cityResponse = try decoder.decode(CityResponse.self, from: data)

            return cityResponse.data
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: \(error.localizedDescription)")
            throw error
        }
    }


    private func fetchCitiesData(from request: URLRequest) async throws -> [City] {
          let (data, response) = try await URLSession.shared.data(for: request)
          
          if let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode != 200 {
              throw NSError(domain: "API Error", code: httpResponse.statusCode, userInfo: [NSLocalizedDescriptionKey: "Failed with status code \(httpResponse.statusCode)"])
          }
          
          print("Received JSON: \(String(data: data, encoding: .utf8) ?? "Invalid JSON")")
          
          let decoder = JSONDecoder()
          decoder.keyDecodingStrategy = .convertFromSnakeCase
          
          let cityResponse = try decoder.decode(CityResponse.self, from: data)
        
        print("Cities response data............................................................................: \(cityResponse) ")
          return cityResponse.data // ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º `data`, –∞ –Ω–µ –≤–µ—Å—å `CityResponse`
      }
   
    func formatCoordinatesForGeoDB(latitude: Double, longitude: Double) -> String {
        let latPrefix = latitude >= 0 ? "%2B" : "-" // ‚úÖ `+` –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö, `-` –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö
        let lonPrefix = longitude >= 0 ? "%2B" : "-" // ‚úÖ `+` –∏–ª–∏ `-` –¥–ª—è –¥–æ–ª–≥–æ—Ç—ã

        let formattedLatitude = String(format: "%.4f", abs(latitude)) // ‚úÖ –ß–∏—Å–ª–æ –±–µ–∑ –∑–Ω–∞–∫–∞
        let formattedLongitude = String(format: "%.4f", abs(longitude)) // ‚úÖ –ß–∏—Å–ª–æ –±–µ–∑ –∑–Ω–∞–∫–∞

        let formattedString = "\(latPrefix)\(formattedLatitude)\(lonPrefix)\(formattedLongitude)" // ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

        print("‚úÖ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: \(formattedString)") // üîç –õ–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        return formattedString
    }



}
